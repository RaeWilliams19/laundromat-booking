{"ast":null,"code":"import _slicedToArray from \"/Users/rae/projects/flowbox/laundry-booking/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rae/projects/flowbox/laundry-booking/src/components/Calendar.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nexport default function Calendar() {\n  const _useState = useState(moment()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  const weekdaysShort = moment.weekdaysShort();\n\n  const firstDayOfMonth = () => {\n    let dateObject = date;\n    let firstDay = moment(dateObject).startOf(\"month\").format(\"d\");\n    return firstDay;\n  };\n\n  const getDaysInMonth = () => {\n    let blanks = [];\n\n    for (let i = 0; i < firstDayOfMonth(); i++) {\n      blanks.push(React.createElement(\"td\", {\n        className: \"calendar-day empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"\"));\n    }\n\n    console.log(bla);\n    /* let daysInMonth = [];\n    for (let d = 1; d <= daysInMonth(); d++) {\n        daysInMonth.push(\n            <td key={d} className=\"calendar-day\">\n                {d}\n            </td>\n        );\n    }\n     const totalSlots = [...blanks, ...daysInMonth];\n    let rows = [];\n    let cells = [];\n     totalSlots.forEach((row, i) => {\n        if (i % 7 !== 0) {\n          cells.push(row); // if index not equal 7 that means not go to next week\n        } else {\n          rows.push(cells); // when reach next week we contain all td in last week to rows \n          cells = []; // empty container \n          cells.push(row); // in current loop we still push current row to new container\n        }\n        if (i === totalSlots.length - 1) { // when end loop we add remain date\n          rows.push(cells);\n        }\n      });\n       let totalDaysInMonth = rows.map((d, i) => {\n        return <tr>{d}</tr>;\n      });\n       return totalDaysInMonth */\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, weekdaysShort.map(day => React.createElement(\"th\", {\n    key: day,\n    className: \"week-day\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, day)))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/rae/projects/flowbox/laundry-booking/src/components/Calendar.js"],"names":["React","useState","moment","Calendar","date","setDate","weekdaysShort","firstDayOfMonth","dateObject","firstDay","startOf","format","getDaysInMonth","blanks","i","push","console","log","bla","map","day"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA,oBACPF,QAAQ,CAACC,MAAM,EAAP,CADD;AAAA;AAAA,QACxBE,IADwB;AAAA,QAClBC,OADkB;;AAE/B,QAAMC,aAAa,GAAGJ,MAAM,CAACI,aAAP,EAAtB;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC1B,QAAIC,UAAU,GAAGJ,IAAjB;AACA,QAAIK,QAAQ,GAAGP,MAAM,CAACM,UAAD,CAAN,CACVE,OADU,CACF,OADE,EAEVC,MAFU,CAEH,GAFG,CAAf;AAGA,WAAOF,QAAP;AACH,GAND;;AAOC,QAAMG,cAAc,GAAG,MAAM;AAC1B,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,eAAe,EAAnC,EAAuCO,CAAC,EAAxC,EAA4C;AACxCD,MAAAA,MAAM,CAACE,IAAP,CACI;AAAI,QAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoC,EAApC,CADJ;AAGH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BH,GAxCA;;AA0CD,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,aAAa,CAACa,GAAd,CAAkBC,GAAG,IAClB;AAAI,IAAA,GAAG,EAAEA,GAAT;AAAc,IAAA,SAAS,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,GADL,CADH,CADL,CADJ,CADJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ,CADJ;AAkBH","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\nexport default function Calendar() {\n    const [date, setDate] = useState(moment())\n    const weekdaysShort = moment.weekdaysShort();\n\n    const firstDayOfMonth = () => {\n        let dateObject = date;\n        let firstDay = moment(dateObject)\n            .startOf(\"month\")\n            .format(\"d\");\n        return firstDay;\n    };\n     const getDaysInMonth = () => {\n        let blanks = [];\n        for (let i = 0; i < firstDayOfMonth(); i++) {\n            blanks.push(\n                <td className=\"calendar-day empty\">{\"\"}</td>\n            );\n        }\n        console.log(bla)\n\n        /* let daysInMonth = [];\n        for (let d = 1; d <= daysInMonth(); d++) {\n            daysInMonth.push(\n                <td key={d} className=\"calendar-day\">\n                    {d}\n                </td>\n            );\n        }\n\n        const totalSlots = [...blanks, ...daysInMonth];\n        let rows = [];\n        let cells = [];\n\n        totalSlots.forEach((row, i) => {\n            if (i % 7 !== 0) {\n              cells.push(row); // if index not equal 7 that means not go to next week\n            } else {\n              rows.push(cells); // when reach next week we contain all td in last week to rows \n              cells = []; // empty container \n              cells.push(row); // in current loop we still push current row to new container\n            }\n            if (i === totalSlots.length - 1) { // when end loop we add remain date\n              rows.push(cells);\n            }\n          });\n\n          let totalDaysInMonth = rows.map((d, i) => {\n            return <tr>{d}</tr>;\n          });\n\n          return totalDaysInMonth */\n    } \n\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        {weekdaysShort.map(day =>\n                            <th key={day} className=\"week-day\">\n                                {day}\n                            </th>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                </tbody>\n            </table>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}