{"ast":null,"code":"import _slicedToArray from \"/Users/rae/projects/flowbox/laundry-booking/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rae/projects/flowbox/laundry-booking/src/components/calendar/Calendar.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport styles from \"./Calendar.module.css\";\nexport default function Calendar() {\n  const _useState = useState(moment()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  const weekdaysShort = moment.weekdaysShort();\n\n  const month = () => {\n    return date.format(\"MMMM\");\n  };\n\n  const today = () => {\n    return date.format(\"D\");\n  };\n\n  const numberOfDaysInMonth = () => {\n    return date.daysInMonth();\n  };\n\n  const firstDayOfMonth = () => {\n    let dateObject = date;\n    let firstDay = moment(dateObject).startOf(\"month\").format(\"d\");\n    return firstDay;\n  };\n\n  const generateCalendarBody = () => {\n    let blanks = [];\n\n    for (let i = 0; i < firstDayOfMonth(); i++) {\n      blanks.push(React.createElement(\"td\", {\n        key: i * 80,\n        className: \"calendar-day empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"\"));\n    }\n\n    let daysInMonth = [];\n\n    for (let d = 1; d <= numberOfDaysInMonth(); d++) {\n      let currentDay = d === today() ? \"today\" : \"\";\n      daysInMonth.push(React.createElement(\"td\", {\n        key: d,\n        className: \"calendar-day \".concat(currentDay),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, d));\n    }\n\n    const totalSlots = [...blanks, ...daysInMonth];\n    let rows = [];\n    let cells = [];\n    totalSlots.forEach((row, i) => {\n      if (i % 7 !== 0) {\n        cells.push(row); // if index not equal 7 that means not go to next week\n      } else {\n        rows.push(cells); // when reach next week we contain all td in last week to rows \n\n        cells = []; // empty container \n\n        cells.push(row); // in current loop we still push current row to new container\n      }\n\n      if (i === totalSlots.length - 1) {\n        // when end loop we add remain date\n        rows.push(cells);\n      }\n    });\n    let totalDaysInMonth = rows.map((d, i) => {\n      return React.createElement(\"tr\", {\n        key: i * 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, d);\n    });\n    return totalDaysInMonth;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, weekdaysShort.map(day => React.createElement(\"th\", {\n    key: day,\n    className: \"week-day\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, day)))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, generateCalendarBody())));\n}","map":{"version":3,"sources":["/Users/rae/projects/flowbox/laundry-booking/src/components/calendar/Calendar.js"],"names":["React","useState","moment","styles","Calendar","date","setDate","weekdaysShort","month","format","today","numberOfDaysInMonth","daysInMonth","firstDayOfMonth","dateObject","firstDay","startOf","generateCalendarBody","blanks","i","push","d","currentDay","totalSlots","rows","cells","forEach","row","length","totalDaysInMonth","map","day"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport styles from \"./Calendar.module.css\";\n\nexport default function Calendar() {\n    const [date, setDate] = useState(moment())\n    const weekdaysShort = moment.weekdaysShort();\n\n    const month = () => {\n        return date.format(\"MMMM\");\n    };\n\n    const today = () => {  \n        return date.format(\"D\");\n   };\n\n    const numberOfDaysInMonth = () => {\n        return date.daysInMonth();\n    }\n\n    const firstDayOfMonth = () => {\n        let dateObject = date;\n        let firstDay = moment(dateObject)\n            .startOf(\"month\")\n            .format(\"d\");\n        return firstDay;\n    };\n\n     const generateCalendarBody = () => {\n        let blanks = [];\n        for (let i = 0; i < firstDayOfMonth(); i++) {\n            blanks.push(\n                <td key={i * 80} className=\"calendar-day empty\">{\"\"}</td>\n            );\n        }\n\n        let daysInMonth = [];\n        for (let d = 1; d <= numberOfDaysInMonth(); d++) {\n            let currentDay = d === today() ? \"today\" : \"\";\n            daysInMonth.push(\n                <td key={d} className={`calendar-day ${currentDay}`}>\n                    {d}\n                </td>\n            );\n        }\n\n        const totalSlots = [...blanks, ...daysInMonth];\n        let rows = [];\n        let cells = [];\n\n        totalSlots.forEach((row, i) => {\n            if (i % 7 !== 0) {\n              cells.push(row); // if index not equal 7 that means not go to next week\n            } else {\n              rows.push(cells); // when reach next week we contain all td in last week to rows \n              cells = []; // empty container \n              cells.push(row); // in current loop we still push current row to new container\n            }\n            if (i === totalSlots.length - 1) { // when end loop we add remain date\n              rows.push(cells);\n            }\n          });\n          \n          let totalDaysInMonth = rows.map((d, i) => {\n            return <tr key={i * 100}>{d}</tr>;\n          });\n\n          return totalDaysInMonth \n    } \n\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        {weekdaysShort.map(day =>\n                            <th key={day} className=\"week-day\">\n                                {day}\n                            </th>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {generateCalendarBody()}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}