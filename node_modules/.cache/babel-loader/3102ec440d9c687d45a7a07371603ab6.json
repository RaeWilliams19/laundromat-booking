{"ast":null,"code":"import _slicedToArray from \"/Users/rae/projects/flowbox/laundry-booking/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rae/projects/flowbox/laundry-booking/src/components/Calendar.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nexport default function Calendar() {\n  const _useState = useState(moment()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  const weekdaysShort = moment.weekdaysShort();\n\n  const firstDayOfMonth = () => {\n    let dateObject = date;\n    let firstDay = moment(dateObject).startOf(\"month\").format(\"d\");\n    return firstDay;\n  };\n\n  const generateCalendar = () => {\n    let blanks = [];\n\n    for (let i = 0; i < firstDayOfMonth(); i++) {\n      blanks.push(React.createElement(\"td\", {\n        className: \"calendar-day empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"\"));\n    }\n\n    let daysInMonth = [];\n\n    for (let d = 1; d <= date.daysInMonth(); d++) {\n      daysInMonth.push(React.createElement(\"td\", {\n        key: d,\n        className: \"calendar-day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, d));\n    }\n\n    const totalSlots = [...blanks, ...daysInMonth];\n    let rows = [];\n    let cells = [];\n    console.log(totalSlots);\n    totalSlots.forEach((row, i) => {\n      if (i % 7 !== 0) {\n        cells.push(row); // if index not equal 7 that means not go to next week\n      } else {\n        rows.push(cells); // when reach next week we contain all td in last week to rows \n\n        cells = []; // empty container \n\n        cells.push(row); // in current loop we still push current row to new container\n      }\n\n      if (i === totalSlots.length - 1) {\n        // when end loop we add remain date\n        rows.push(cells);\n      }\n    });\n    let totalDaysInMonth = rows.map((d, i) => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, d);\n    });\n    return totalDaysInMonth;\n  };\n\n  console.log(generateCalendar());\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, weekdaysShort.map(day => React.createElement(\"th\", {\n    key: day,\n    className: \"week-day\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, day)))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/rae/projects/flowbox/laundry-booking/src/components/Calendar.js"],"names":["React","useState","moment","Calendar","date","setDate","weekdaysShort","firstDayOfMonth","dateObject","firstDay","startOf","format","generateCalendar","blanks","i","push","daysInMonth","d","totalSlots","rows","cells","console","log","forEach","row","length","totalDaysInMonth","map","day"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\nexport default function Calendar() {\n    const [date, setDate] = useState(moment())\n    const weekdaysShort = moment.weekdaysShort();\n\n    const firstDayOfMonth = () => {\n        let dateObject = date;\n        let firstDay = moment(dateObject)\n            .startOf(\"month\")\n            .format(\"d\");\n        return firstDay;\n    };\n\n     const generateCalendar = () => {\n        let blanks = [];\n        for (let i = 0; i < firstDayOfMonth(); i++) {\n            blanks.push(\n                <td className=\"calendar-day empty\">{\"\"}</td>\n            );\n        }\n\n        let daysInMonth = [];\n        for (let d = 1; d <= date.daysInMonth(); d++) {\n            daysInMonth.push(\n                <td key={d} className=\"calendar-day\">\n                    {d}\n                </td>\n            );\n        }\n\n        const totalSlots = [...blanks, ...daysInMonth];\n        let rows = [];\n        let cells = [];\n        console.log(totalSlots)\n\n        totalSlots.forEach((row, i) => {\n            if (i % 7 !== 0) {\n              cells.push(row); // if index not equal 7 that means not go to next week\n            } else {\n              rows.push(cells); // when reach next week we contain all td in last week to rows \n              cells = []; // empty container \n              cells.push(row); // in current loop we still push current row to new container\n            }\n            if (i === totalSlots.length - 1) { // when end loop we add remain date\n              rows.push(cells);\n            }\n          });\n\n          let totalDaysInMonth = rows.map((d, i) => {\n            return <tr>{d}</tr>;\n          });\n\n          return totalDaysInMonth \n    } \nconsole.log(generateCalendar())\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        {weekdaysShort.map(day =>\n                            <th key={day} className=\"week-day\">\n                                {day}\n                            </th>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}