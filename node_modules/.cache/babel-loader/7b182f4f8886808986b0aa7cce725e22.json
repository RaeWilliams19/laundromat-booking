{"ast":null,"code":"import _slicedToArray from \"/Users/rae/projects/flowbox/laundry-booking/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rae/projects/flowbox/laundry-booking/src/components/calendar/Calendar.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport './Calendar.css';\nexport default function Calendar() {\n  const _useState = useState(moment()),\n        _useState2 = _slicedToArray(_useState, 1),\n        date = _useState2[0];\n\n  const weekdaysShort = moment.weekdaysShort();\n\n  const currentWeekNumber = () => {\n    return date.week();\n  };\n\n  const today = () => {\n    return parseInt(date.format(\"D\"));\n  };\n\n  const currentWeek = () => {\n    const daysInWeek = [];\n    const startDate = date.startOf('week');\n\n    for (let i = 1; i <= 7; i++) {\n      daysInWeek.push(moment(startDate).add(i, 'day'));\n    }\n\n    console.log;\n  };\n\n  console.log(startDate, moment(startDate).add(1, 'day'));\n\n  const nextWeek = () => {\n    console.log(moment().add(1, 'weeks').startOf('week'));\n    console.log(moment().add(1, 'weeks').endOf('week'));\n  };\n\n  const lastWeek = () => {\n    moment().subtract(1, 'weeks').startOf('isoWeek');\n    moment().subtract(1, 'weeks').endOf('isoWeek');\n  };\n  /* const generateCalendarBody = () => {\n      let blanks = [];\n      for (let i = 0; i < firstDayOfMonth(); i++) {\n          blanks.push(\n              <td key={i * 80} className=\"calendar-day empty\">{\"\"}</td>\n          );\n      }\n       let daysInMonth = [];\n      for (let d = 1; d <= numberOfDaysInMonth(); d++) {\n          let currentDay = d === today() ? \"today\" : \"\";\n          daysInMonth.push(\n              <td key={d} className={`calendar-day ${currentDay}`}>\n                  {d}\n              </td>\n          );\n      }\n      const totalSlots = [...blanks, ...daysInMonth];\n      let rows = [];\n      let cells = [];\n      totalSlots.forEach((row, i) => {\n          if (i % 7 !== 0) {\n              cells.push(row); // if index not equal 7 that means not go to next week\n          } else {\n              rows.push(cells); // when reach next week we contain all td in last week to rows \n              cells = []; // empty container \n              cells.push(row); // in current loop we still push current row to new container\n          }\n          if (i === totalSlots.length - 1) { // when end loop we add remain date\n              rows.push(cells);\n          }\n      });\n      let totalDaysInMonth = rows.map((d, i) => {\n          return <tr key={i * 100}>{d}</tr>;\n      });\n      return totalDaysInMonth\n  }\n  */\n\n\n  return React.createElement(\"div\", {\n    className: \"calendar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    colSpan: \"7\",\n    className: \"calendar-month\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Week \" + currentWeekNumber())), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, weekdaysShort.map(day => React.createElement(\"th\", {\n    key: day,\n    className: \"week-day\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, day)))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/rae/projects/flowbox/laundry-booking/src/components/calendar/Calendar.js"],"names":["React","useState","moment","Calendar","date","weekdaysShort","currentWeekNumber","week","today","parseInt","format","currentWeek","daysInWeek","startDate","startOf","i","push","add","console","log","nextWeek","endOf","lastWeek","subtract","map","day"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,gBAAP;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA,oBAChBF,QAAQ,CAACC,MAAM,EAAP,CADQ;AAAA;AAAA,QACxBE,IADwB;;AAE/B,QAAMC,aAAa,GAAGH,MAAM,CAACG,aAAP,EAAtB;;AAEA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,WAAOF,IAAI,CAACG,IAAL,EAAP;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAChB,WAAOC,QAAQ,CAACL,IAAI,CAACM,MAAL,CAAY,GAAZ,CAAD,CAAf;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtB,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,SAAS,GAAGT,IAAI,CAACU,OAAL,CAAa,MAAb,CAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBH,MAAAA,UAAU,CAAEI,IAAZ,CAAiBd,MAAM,CAACW,SAAD,CAAN,CAAkBI,GAAlB,CAAsBF,CAAtB,EAAyB,KAAzB,CAAjB;AACH;;AACDG,IAAAA,OAAO,CAACC,GAAR;AACH,GAPD;;AAQJD,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ,EAAuBX,MAAM,CAACW,SAAD,CAAN,CAAkBI,GAAlB,CAAsB,CAAtB,EAAyB,KAAzB,CAAvB;;AACI,QAAMG,QAAQ,GAAG,MAAM;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,GAAGe,GAAT,CAAa,CAAb,EAAgB,OAAhB,EAAyBH,OAAzB,CAAiC,MAAjC,CAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,GAAGe,GAAT,CAAa,CAAb,EAAgB,OAAhB,EAAyBI,KAAzB,CAA+B,MAA/B,CAAZ;AACH,GAHD;;AAKA,QAAMC,QAAQ,GAAG,MAAM;AACnBpB,IAAAA,MAAM,GAAGqB,QAAT,CAAkB,CAAlB,EAAqB,OAArB,EAA8BT,OAA9B,CAAsC,SAAtC;AACAZ,IAAAA,MAAM,GAAGqB,QAAT,CAAkB,CAAlB,EAAqB,OAArB,EAA8BF,KAA9B,CAAoC,SAApC;AACH,GAHD;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,OAAO,EAAC,GAAZ;AAAgB,IAAA,SAAS,EAAC,gBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4C,UAAUf,iBAAiB,EAAvE,CADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,aAAa,CAACmB,GAAd,CAAkBC,GAAG,IAClB;AAAI,IAAA,GAAG,EAAEA,GAAT;AAAc,IAAA,SAAS,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,GADL,CADH,CADL,CAJJ,CADJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CADJ,CADJ;AAqBH","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport './Calendar.css';\n\nexport default function Calendar() {\n    const [date] = useState(moment())\n    const weekdaysShort = moment.weekdaysShort();\n\n    const currentWeekNumber = () => {\n        return date.week();\n    };\n\n    const today = () => {\n        return parseInt(date.format(\"D\"));\n    };\n\n    const currentWeek = () => {\n        const daysInWeek = [];\n        const startDate = date.startOf('week');\n        for(let i = 1; i <= 7; i++){\n            daysInWeek. push(moment(startDate).add(i, 'day'));\n        }\n        console.log\n    }\nconsole.log(startDate, moment(startDate).add(1, 'day'))\n    const nextWeek = () => {\n        console.log(moment().add(1, 'weeks').startOf('week'))\n        console.log(moment().add(1, 'weeks').endOf('week'))\n    }\n\n    const lastWeek = () => {\n        moment().subtract(1, 'weeks').startOf('isoWeek')\n        moment().subtract(1, 'weeks').endOf('isoWeek')\n    }\n    /* const generateCalendarBody = () => {\n        let blanks = [];\n        for (let i = 0; i < firstDayOfMonth(); i++) {\n            blanks.push(\n                <td key={i * 80} className=\"calendar-day empty\">{\"\"}</td>\n            );\n        }\n\n        let daysInMonth = [];\n        for (let d = 1; d <= numberOfDaysInMonth(); d++) {\n            let currentDay = d === today() ? \"today\" : \"\";\n            daysInMonth.push(\n                <td key={d} className={`calendar-day ${currentDay}`}>\n                    {d}\n                </td>\n            );\n        }\n        const totalSlots = [...blanks, ...daysInMonth];\n        let rows = [];\n        let cells = [];\n        totalSlots.forEach((row, i) => {\n            if (i % 7 !== 0) {\n                cells.push(row); // if index not equal 7 that means not go to next week\n            } else {\n                rows.push(cells); // when reach next week we contain all td in last week to rows \n                cells = []; // empty container \n                cells.push(row); // in current loop we still push current row to new container\n            }\n            if (i === totalSlots.length - 1) { // when end loop we add remain date\n                rows.push(cells);\n            }\n        });\n        let totalDaysInMonth = rows.map((d, i) => {\n            return <tr key={i * 100}>{d}</tr>;\n        });\n        return totalDaysInMonth\n    }\n */\n    return (\n        <div className=\"calendar\">\n            <table>\n                <thead>\n                    <tr>\n                        <th colSpan=\"7\" className=\"calendar-month\">{\"Week \" + currentWeekNumber()}</th>\n                    </tr>\n                    <tr>\n                        {weekdaysShort.map(day =>\n                            <th key={day} className=\"week-day\">\n                                {day}\n                            </th>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                </tbody>\n            </table>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}